import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, \
    CallbackQueryHandler, CommandHandler, ContextTypes, ConversationHandler

from gpt import ChatGptService
from util import load_message, load_prompt, send_text_buttons, send_text, \
    send_image, show_main_menu

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –¢–æ–∫–µ–Ω—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram –∏ ChatGPT
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GPT_TOKEN = os.getenv("ChatGPT_TOKEN")
chat_gpt = ChatGptService(GPT_TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
MENU, RANDOM, GPT, TALK, QUIZ, TRANSLATE = range(6)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–≤—Ç–æ—Ä—è—è –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    await update.message.reply_text(update.message.text)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.callback_query.answer()
    await start(update, context)
    return MENU

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."""
    text = load_message('main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'translate': '–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤'
    })
    return MENU

async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É ChatGPT —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–≥–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ."""
    prompt = load_prompt('random')
    ans = await chat_gpt.send_question(prompt, '')
    await send_text_buttons(update, context, ans, {
        'random_more': '–µ—â–µ –æ–¥–∏–Ω —Ñ–∞–∫—Ç',
        'end': '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'
    })
    return RANDOM

async def random_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    await update.callback_query.answer()
    await random(update, context)
    return RANDOM

async def gpt_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å ChatGPT –∏ –∑–∞–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –¥–∏–∞–ª–æ–≥–∞."""
    prompt = load_prompt('gpt')
    chat_gpt.set_prompt(prompt)
    msg = load_message('gpt')
    await send_text(update, context, msg)
    return GPT

async def gpt_dialog_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ —Å ChatGPT."""
    qs = update.message.text
    ans = await chat_gpt.add_message(qs)
    await send_text_buttons(update, context, ans, {'end': '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'})
    return GPT

async def talk_with_person(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∑–Ω–∞–º–µ–Ω–∏—Ç—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ–±—â–µ–Ω–∏—è."""
    message = load_message('talk')
    await send_text_buttons(update, context, message, {
        'talk_cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω',
        'talk_hawking': '–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥',
        'talk_nietzsche': '–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ',
        'talk_queen': '–≠–ª–∏ÃÅ–∑–∞–±–µ—Ç –ê–ª–µ–∫—Å–∞ÃÅ–Ω–¥—Ä–∞ –ú—çÃÅ—Ä–∏ –í–∏ÃÅ–Ω–¥–∑–æ—Ä',
        'talk_tolkien': '–î–∂–æ–Ω –†–æ–Ω–∞–ª—å–¥ –†—É—ç–ª –¢–æ–ª–∫–∏–Ω',
    })
    return TALK

async def talk_with_person_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–Ω–∞–º–µ–Ω–∏—Ç–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é, –æ—Ç–æ–±—Ä–∞–∂–∞—è –µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç."""
    await update.callback_query.answer()
    cb = update.callback_query.data
    prompt = load_prompt(cb)
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, cb)
    await send_text(update, context, f'–ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')
    return TALK

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã."""
    context.user_data.update({"quiz_count": 0, "quiz_score": 0})
    chat_gpt.set_prompt(load_prompt('quiz'))
    msg = load_message('quiz')
    await send_image(update, context, 'quiz')
    await send_text_buttons(update, context, msg, {
        'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python',
        'quiz_math': '–¢–µ–æ—Ä–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –º–Ω–æ–∂–µ—Å—Ç–≤ –∏ –º–∞—Ç–∞–Ω–∞–ª–∏–∑–∞',
        'quiz_biology': '–ë–∏–æ–ª–æ–≥–∏—è'
    })
    return QUIZ

async def quiz_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å."""
    await update.callback_query.answer()
    topic = update.callback_query.data

    if topic == 'quiz_more':
        context.user_data["quiz_count"] += 1
        next_qs = "quiz_more"
    else:
        context.user_data.update({"quiz_count": 1, "quiz_score": 0})
        await send_text(update, context, "–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!")
        next_qs = topic

    question = await chat_gpt.add_message(next_qs)
    await send_text(update, context, question)
    return QUIZ

async def quiz_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    ans = update.message.text
    response = await chat_gpt.add_message(ans)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞
    if "–ø—Ä–∞–≤–∏–ª—å–Ω–æ!" == response.lower():
        context.user_data["quiz_score"] += 1

    await send_text(update, context, response)
    await send_text_buttons(
        update, context,
        f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {context.user_data["quiz_score"]} –∏–∑ {context.user_data["quiz_count"]}.',
        {'quiz_more': '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', 'end': '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'}
    )
    return QUIZ

async def translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ –∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞."""
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è ChatGPT
    chat_gpt.set_prompt(
        '—Ç—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫, —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –Ω–∞–ø–∏—Å–∞–Ω —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—à—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" –¥–ª—è –≤—ã—Ö–æ–¥–∞
    await send_text_buttons(
        update, context, 
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:', 
        {'ru': '–†—É—Å—Å–∫–∏–π', 'en': 'English', 'end': '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'}
    )
    return TRANSLATE

async def handle_translation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""

    if update.callback_query:
        if update.callback_query.data == 'end':  # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
            await update.callback_query.answer()
            await start(update, context)
            return MENU
        
        # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        await update.callback_query.answer()
        selected_lang = update.callback_query.data
        context.user_data['translation_language'] = selected_lang
        await send_text(update, context, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.')

    elif update.message:  # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        selected_lang = context.user_data.get('translation_language', 'en')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é English
        text = update.message.text
        await send_text(update, context, '–í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–≤–æ–¥–∞...')

        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        ans = await chat_gpt.add_message(f"{selected_lang}: {text}")
        await send_text_buttons(update, context, ans, {'end': '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'})  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    
    return TRANSLATE


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ —Ä–∞–±–æ—Ç—É."""
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MENU: [
                CommandHandler('random', random),
                CommandHandler('gpt', gpt_mode),
                CommandHandler('talk', talk_with_person),
                CommandHandler('quiz', quiz),  # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–∏–∑ –≤ –º–µ–Ω—é
                CommandHandler('translate', translate)
            ],
            RANDOM: [
                CallbackQueryHandler(random_button, pattern='random_'),
                CallbackQueryHandler(cancel, pattern='end')
            ],
            GPT: [
                CallbackQueryHandler(cancel, pattern='end'),
                MessageHandler(filters=filters.TEXT & ~filters.COMMAND, callback=gpt_dialog_mode)

            ],
            TALK: [
                CallbackQueryHandler(cancel, pattern='end'),
                CallbackQueryHandler(talk_with_person_dialog),
                MessageHandler(filters=filters.TEXT & ~filters.COMMAND, callback=gpt_dialog_mode),
            ],
            QUIZ: [
                CallbackQueryHandler(quiz_button, pattern='^quiz_'),  # –î–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
                CallbackQueryHandler(cancel, pattern='end'),  # –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–∏–∑–∞
                MessageHandler(filters.TEXT & ~filters.COMMAND, quiz_dialog),  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
            ],
            TRANSLATE: [
                CallbackQueryHandler(handle_translation),  # –î–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
                CallbackQueryHandler(cancel, pattern='end'),  # –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_translation)  # –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
            ],
        },
        fallbacks=[CommandHandler('start', start)],
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.add_handler(conv_handler)
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
