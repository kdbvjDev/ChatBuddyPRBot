import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, \
    CallbackQueryHandler, CommandHandler, ContextTypes, ConversationHandler

from gpt import ChatGptService
from util import load_message, load_prompt, send_text_buttons, send_text, \
    send_image, show_main_menu

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GPT_TOKEN = os.getenv("ChatGPT_TOKEN")
chat_gpt = ChatGptService(GPT_TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
MENU, RANDOM, GPT, TALK, QUIZ = range(5)

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(update.message.text)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await start(update, context)
    return MENU


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = load_message('main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì'
    })
    return MENU


async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = load_prompt('random')
    ans = await chat_gpt.send_question(prompt, '')
    await send_text_buttons(update, context, ans, {
        'random_more': '–µ—â–µ –æ–¥–∏–Ω —Ñ–∞–∫—Ç',
        'end': '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'
    })
    return RANDOM


async def random_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await random(update, context)
    return RANDOM


async def gpt_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = load_prompt('gpt')
    chat_gpt.set_prompt(prompt)
    msg = load_message('gpt')
    await send_text(update, context, msg)
    return GPT


async def gpt_dialog_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    qs = update.message.text
    ans = await chat_gpt.add_message(qs)
    await send_text_buttons(update, context, ans, {'end': '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'})
    return GPT


async def talk_with_person(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = load_message('talk')
    await send_text_buttons(update, context, message, {
        'talk_cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω',
        'talk_hawking': '–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥',
        'talk_nietzsche': '–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ',
        'talk_queen': '–≠–ª–∏ÃÅ–∑–∞–±–µ—Ç –ê–ª–µ–∫—Å–∞ÃÅ–Ω–¥—Ä–∞ –ú—çÃÅ—Ä–∏ –í–∏ÃÅ–Ω–¥–∑–æ—Ä',
        'talk_tolkien': '–î–∂–æ–Ω –†–æ–Ω–∞–ª—å–¥ –†—É—ç–ª –¢–æ–ª–∫–∏–Ω',
    })
    return TALK


async def talk_with_person_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    cb = update.callback_query.data
    prompt = load_prompt(cb)
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, cb)
    await send_text(update, context, f'–ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')
    return TALK


async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã."""
    context.user_data.update({"quiz_count": 0, "quiz_score": 0})
    chat_gpt.set_prompt(load_prompt('quiz'))
    msg = load_message('quiz')
    await send_image(update, context, 'quiz')
    await send_text_buttons(update, context, msg, {
        'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python',
        'quiz_math': '–¢–µ–æ—Ä–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –º–Ω–æ–∂–µ—Å—Ç–≤ –∏ –º–∞—Ç–∞–Ω–∞–ª–∏–∑–∞',
        'quiz_biology': '–ë–∏–æ–ª–æ–≥–∏—è'
    })
    return QUIZ


async def quiz_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    await update.callback_query.answer()
    topic = update.callback_query.data

    if topic == 'quiz_more':
        context.user_data["quiz_count"] += 1
        next_qs = "quiz_more"
    else:
        context.user_data.update({"quiz_count": 1, "quiz_score": 0})
        await send_text(update, context, "–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!")
        next_qs = topic

    question = await chat_gpt.add_message(next_qs)
    await send_text(update, context, question)
    return QUIZ


async def quiz_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    ans = update.message.text
    response = await chat_gpt.add_message(ans)

    if "–ø—Ä–∞–≤–∏–ª—å–Ω–æ!" == response.lower():
        context.user_data["quiz_score"] += 1
        context.user_data["quiz_score"] += 1

    await send_text(update, context, response)
    await send_text_buttons(
        update, context,
        f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {context.user_data["quiz_score"]} –∏–∑ {context.user_data["quiz_count"]}.',
        {'quiz_more': '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
         'end': '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'}
    )
    return QUIZ

# async def translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await send_text_buttons(update, context, '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞', {
#         'ru': '–†—É—Å—Å–∫–∏–π',
#         'en': 'English'
#     })




def main() -> None:
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MENU: [
                CommandHandler('random', random),
                CommandHandler('gpt', gpt_mode),
                CommandHandler('talk', talk_with_person),
                CommandHandler('quiz', quiz),  # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–∏–∑ –≤ –º–µ–Ω—é
            ],
            RANDOM: [
                CallbackQueryHandler(random_button, pattern='random_'),
                CallbackQueryHandler(cancel, pattern='end')
            ],
            GPT: [
                CallbackQueryHandler(cancel, pattern='end'),
                MessageHandler(filters=filters.TEXT & ~filters.COMMAND, callback=gpt_dialog_mode)

            ],
            TALK: [
                CallbackQueryHandler(cancel, pattern='end'),
                CallbackQueryHandler(talk_with_person_dialog),
                MessageHandler(filters=filters.TEXT & ~filters.COMMAND, callback=gpt_dialog_mode),
            ],
            QUIZ: [
                CallbackQueryHandler(quiz_button, pattern='^quiz_'),  # –î–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
                CallbackQueryHandler(cancel, pattern='end'),  # –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–∏–∑–∞
                MessageHandler(filters.TEXT & ~filters.COMMAND, quiz_dialog),  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
            ],
        },
        fallbacks=[CommandHandler('start', start)],
    )

    app.add_handler(conv_handler)
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
